{"name":"@everymundo/http-client","tagline":"","body":"# @everymundo/http-client\r\n![Node.js CI](https://github.com/EveryMundo/http-client/workflows/Node.js%20CI/badge.svg)\r\n\r\nThis is yet another nodejs promise based ```/https?/``` client.\r\n\r\n## Features\r\n* Automatically retries to send the requests when statusCode > 399\r\n* Supports compressed POST\r\n* Supports compressed GET\r\n\r\n## Install\r\n```sh\r\nnpm install @everymundo/http-client\r\n```\r\n\r\n## Usage\r\n### POST some data\r\n```js\r\nconst httpClient = require('@everymundo/http-client')\r\n\r\nconst headers = { 'content-type': 'application/json' }\r\nconst endpoint = new httpClient.PostEndpoint('http://your-host.com/path', headers)\r\nconst data = { myData:'Something' }\r\n\r\nconst res = await httpClient.promiseDataTo(endpoint, data)\r\n// OR\r\nconst res = await httpClient.promisePost(endpoint, data)\r\n// OR\r\nconst res = await httpClient.post(endpoint, data)\r\n```\r\n\r\n### POST compressed data\r\n```js\r\nconst httpClient = require('@everymundo/http-client')\r\n\r\nconst headers = { 'content-type': 'application/json', 'x-compression': 'gzip' }\r\nconst endpoint = new httpClient.PostEndpoint('http://your-host.com/path', headers)\r\n\r\n// because of the x-compression header this will be gzipped after JSON.stringify\r\nconst res = await httpClient.post(endpoint, data)\r\n```\r\n\r\n\r\n### GET some data\r\n```js\r\nconst httpClient = require('@everymundo/http-client')\r\n\r\nconst headers = { 'authorization': 'your token' }\r\nconst endpoint = new httpClient.GetEndpoint('http://your-host.com/path', headers)\r\n\r\nconst res = await httpClient.promiseGet(endpoint)\r\n// OR\r\nconst res = await httpClient.get(endpoint)\r\n```\r\n\r\n### POST using the Fetch API\r\n```js\r\nconst httpClient = require('@everymundo/http-client')\r\n\r\nconst headers = { 'authorization': 'your token' }\r\nconst res = await httpClient.fetch('http://your-host.com/path', { headers, body: data })\r\n```\r\n\r\n### HEAD request\r\n```js\r\nconst httpClient = require('@everymundo/http-client')\r\n\r\nconst headers = { 'authorization': 'your token' }\r\nconst res = httpClient.head('http://your-host.com/path', { headers })\r\n```\r\n\r\n### GET using the Fetch API\r\n```js\r\nconst { fetch } = require('@everymundo/http-client')\r\n\r\nconst headers = { 'authorization': 'your token' }\r\nconst res = await fetch('http://your-host.com/path', { headers })\r\n```\r\n\r\n### HEAD using the Fetch API\r\n```js\r\nconst { fetch } = require('@everymundo/http-client')\r\n\r\nconst headers = { 'authorization': 'your token' }\r\nconst res = await fetch('http://your-host.com/path', { headers })\r\n```\r\n\r\n## Response Schema\r\n```js\r\n{\r\n    statusCode, // the response statusCode\r\n    code, // alias for statusCode [for backaward compatibility]\r\n    err,\r\n    method, // Request Method\r\n    start, // Date Object captured right before starting the request\r\n    end: Date.now(), // Int Timestamp from when the request has finished\r\n    attempt, // the number of attempts of the retries\r\n    endpoint, // the endpoint object either passed or generated from a string\r\n    resTxt, // alias for responseText [for backaward compatibility]\r\n    responseText, // the response buffer.toString()\r\n    buffer, // uncompressed responseBuffer if that one is compressed, otherwise, responseBuffer \r\n    responseBuffer, // raw response buffer\r\n    dataType, // the name of the constructor of the posted data [Array, Object, String, Buffer]\r\n    dataLen, // when posting arrays it shows the number of array items posted\r\n    compress, // the type of compression for the POST request, if any. Valid values are gzip and deflate\r\n    requestHeaders, // the headers used on the request\r\n    responseHeaders // the headers received from the remote server\r\n}\r\n```\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}